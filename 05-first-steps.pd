# 第一步

现在,我们将看到在Python中如何运行一个传统的“Hello World”程序。这将教你如何写、保存和运行Python程序。


使用Python运行你的程序有两种方法——使用交互式解释器提示符或使用一个源文件。现在,我们将看到如何使用这两种方法。


## 使用解释器提示符

在您的操作系统中打开终端(如前面[安装章节](#安装)所述),然后，输入“python3”按回车键，打开Python提示符。

一旦你启动python 3,您应该看到'>>>”,这被称为* Python解释器提示符*，你可以开始输入的东西。

在Python解释器提示符下，输入‘print(“Hello World”)’后按回车键。您应该看到输出了单词“Hello World”。


当使用一个Mac OS X计算机，下面是你将看到的一个例子。Python软件的细节会根据你的电脑不同而有所不同，但从提示符(即从“>>>”开始)与操作系统无关，应该是相同。


~~~
$ python3
Python 3.3.0 (default, Oct 22 2012, 12:20:36)
[GCC 4.2.1 Compatible Apple Clang 4.0 ((tags/Apple/clang-421.0.60))] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> print('hello world')
hello world
>>> 
~~~

注意,Python让你的代码行立即输出了!你刚才输入的是一个Python *语句*。我们使用`print`打印出(不出所料)你提供给它的任何值。在这里,我们提供的是文本“Hello World”,并立即打印到屏幕上。


如何解释器提示符

:   如果你正在使用一个Linux或Unix shell,您可以通过按下“ctrl - d’或输入“exit()“(注意:记得包含括号,“()”)，然后输入`回车` 键。如果您使用的是Windows命令行提示符,按“ctrl - z”键再按“回车”键，退出解释器提示符。


## 选择一个编辑器

我们不能在每次想要运行一些东西的时候都要在解释器提示符下输入我们的程序，所以我们必须把它们保存为文件，这样我们可以任意次地运行我们的程序。

要创建我们的Python源文件,我们需要一个可以输入并保存它们的编辑软件。一个优秀的程序员的编辑器将使你写源代码文件的生活更容易。因此，选择一个编辑器确实至关重要。你必须选择一个编辑器，就像你选择要买的汽车一样。一个好的编辑器会帮助您很容易地编写Python程序，（就像一辆车可以让你）以一个更快和更安全的方式，让你的旅程更舒适，并且可以帮助你达到你的目的地(实现你的目标)。

一个非常基本的需求是*语法高亮显示*，分别以不同的彩色显示你的Python程序所有的不同部分，以便您可以*看到*你的程序且使其运行可视化。

如果你不知道从哪里开始，我推荐可以在Windows、Mac OS X和Linux上使用的[Komodo Edit](http://www.activestate.com/komodo-edit/downloads)软件。

如果您使用的是Windows，**不要使用记事本**——这是一个糟糕的选择，因为它不做语法高亮显示，而且更重要的是它不支持文字的缩进——之后我们在我们的例子中会看到，缩进是非常重要的。好的编辑器如Komodo Edit会自动地做到这一点。

如果你是一名有经验的程序员，那么你一定已经使用[Vim](http://www.vim.org/)或(Emacs)(http://www.gnu.org/software/emacs/)了。不用说，这是两个最强大的编辑器，使用它们来写你的Python程序，你会从中受益。就我自己而言，在我的大多数项目,甚至写一[整本书都在用Vim](http://www.swaroopch.com/notes/vim)。,从长远来看Vim或者Emacs是非常有用的，如果你愿意花时间去学习，那么我强烈建议你使用它们。然而,正如我之前提到的,初学者在这一刻，可以从 Komodo Edit开始集中学习Python而不是编辑器。

再次重申，请选择一个适当的编辑器，它可以使编写Python程序更有趣和更容易。


对Vim用户

:   John M Anderson有一个很好的如何[使Vim成为强大的Python IDE)(http://blog.sontek.net/blog/detail/turning-vim-into-a-modern-python-ide)的介绍。还推荐[jedi-vim插件](https://github.com/davidhalter/jedi-vim)和我[自己的dotvim配置](https://github.com/swaroopch/dotvim)。

对Emacs用户

:   Pedro Kroger有一个很好的如何[使Emacs成为强大的Python IDE](http://pedrokroger.net/2010/07/configuring-emacs-as-a-python-ide-2/)的介绍。还建议[BG的dotemacs配置](https://github.com/ghoseb/dotemacs)。

## 使用一个源文件

现在让我们回到编程。每当你学习一种新的编程语言时，有一个传统，你编写和运行的第一个程序是“Hello World”程序——当你运行它时，它所做的只是说“Hello World”。正如Simon Cozens(神奇的"Beginning Perl"的作者)所说，这是“向编程神祈求帮你更好学习语言的传统咒语。”

开始你选择的编辑器，输入以下程序并将其保存为“hello.py’。

如果你使用Komodo编辑器，点击`File` --- `New` --- `New File`,输入下行:

~~~python
print('Hello World')
~~~

在Komodo编辑器，选`File` --- `Save`保存文件。

你应将文件保存在哪里？你知道位置的任何文件夹。如果你不明白这是什么意思，创建一个新文件夹，并使用该位置保存和运行你所有的Python程序:

- `C:\\py` 在Windows上
- `/tmp/py` 在Linux上
- `/tmp/py` 在Mac OS X上

使用'mkdir'命令在命令行创建一个文件夹，例如,“mkdir/tmp/py”。


重要的

:   总要确保你给它的文件扩展名是`.py`，例如，“foo.py”。

在Komodo Edit，请单击“Tools”---“Run Command”，输入"python3 hello.py",单击“Run”,你应该看到像下面截图的打印输出。


![“Hello world”程序在Komodo编辑器中的截图](assets/komodo-edit-hello-world.png)

尽管最好的方式是在Komodo中输入它，但在命令行也可以：

#. 打开在[安装章节](#安装)中介绍的一个命令行。
#. *C*hange *d*irectory（改变路径）到你保存文件的目录，例如`cd /tmp/py`
#. 在命令行输入`python3 hello.py`命令运行程序。

输出如下所示：

~~~
$ python3 hello.py
Hello World
~~~
如果你得到了如上所示有输出，祝贺你!——你已经成功地运行了你的第一个Python程序。您已经成功地越过学习编程最难的部分－－开始你的第一个程序!

如果你得到了一个错误，请*完全*输入如上所示程序，再次运行这个程序。注意，Python是区分大小写的，即“print”并不等于“Print”——注意，前者是小写字母“p”和后者是大写字母“P”。同样，确保每一行的第一个字母之前没有空格或制表符——之后我们将[明白为什么这很重要](#缩进)。


**它是如何工作的**

Python程序是由*语句*组成，在我们的第一个程序中，我们只有一个语句，在这个语句中，我们调用“print”*函数*，它只是打印文本“Hello World”。我们在(稍后章节](#函数)将详细学习函数——你现在应该理解的是,无论你在括号提供什么，都将打印到屏幕上。在本例中，我们提供了文本“Hello World”。

### 可执行的Python程序

这只适用于Linux和Unix用户，但Windows用户应该知道。

每次，你想要运行一个Python程序，我们必须显式地调用的“python3 foo.py”，但是我们为什么不能像运行我们电脑中的其它任何程序一样运行它呢？我们通过使用叫*hashbang*行代码可以实现。

添加下面的一行作为程序的*第一行*:

~~~python
#!/usr/bin/env python3
~~~

这样，你的程序应该像现在这样:

~~~python
#!/usr/bin/env python3
print('Hello World')
~~~

第二，我们必须给程序的可执行权限－－使用' chmod '命令，然后*运行*源程序。

这里使用的chmod命令是*ch*ange the *mod*e of the file （改变文件的模式），通过给系统*A*ll(所有)用户e*x*ecute（可执行）权限。

~~~
$ chmod a+x hello.py
~~~

现在，我们可以直接运行我们的程序，因为我们的操作系统调用“/usr/bin/env”，它按次序找到我们的Python 3软件，然后知道如何运行我们的源文件:

~~~
$ ./hello.py
Hello World
~~~

我们使用“./”用来指示程序在当前目录中。

为了让事情变得更有趣，你可以将文件重命名为“hello”然后像“./hello”这样运行它，因为系统知道它必须使用源代码文件中第一行指定位置的解释器运行它，所以它仍将工作。

到目前为止,我们已经能够运行我们的程序,只要我们知道确切的路径。如果我们希望能够运行该程序从文件夹?您可以通过将程序存储在列在“路径”环境变量中的一个文件夹中来实现。

无论你何时运行任何程序，系统在列在“PATH”（路径）环境变量中的每个文件夹查找该程序，然后运行程序。我们通过简单地复制这个源文件到“PATH”（路径）列出的目录中，可以让这个程序到处可用。

~~~
$ echo $PATH
/usr/local/bin:/usr/bin:/bin:/usr/X11R6/bin:/home/swaroop/bin
$ cp hello.py /home/swaroop/bin/hello
$ hello
Hello World
~~~

使用'echo'（回响）命令和变量（PATH）名称加前缀'$'，指示shell我们需要“环境变量”的值，我们可以显示“PATH”（路径）变量的值。我们看到,“/home/swaroop/bin”是PATH变量中的一个目录，* swaroop *是在我的系统中我用的用户名，通常在你的系统中为你的用户名，会有一个类似的目录。

如果你想添加您所选择的目录到“PATH”变量中——这可以通过运行“export PATH=$PATH:/home/swaroop/mydir”,“:/home/swaroop/mydir”是我想添加到“PATH”变量中的目录。

如果你想写可以在任何时间、在任何地点运行的命令，这个方法非常有用。这就像创建你自己的在命令行使用的命令，就像“cd”或任何其他命令。


## 获得帮助

如果您需要快速获取任何的Python函数或语句的信息，那么您可以使用内置的“help”(帮助)功能。这是非常有用的，尤其是当使用翻译提示符时，例如，运行‘help(print)”——这将显示print函数的帮助－－用于打印东西到屏幕上。

注意

:   按`q`退出帮助

类似地,您可以获得Python中几乎任何事情的信息，使用“help()”去学习更多关于使用“help”本身的信息!

如果你需要获取操作符，如“return”的帮助，那么你只需要把这些放到引号内部，如“help('return'），所以，对于我们试图要做的事情，Python并不感到困惑。

## 总结

现在，你可以自由自在地编写、保存和运行Python程序了。

既然你是一名Python用户，让我们学习一些Python概念。