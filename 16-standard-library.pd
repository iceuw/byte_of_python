# 标准库

Python标准库包含大量有用的模块，是每个标准Python安装的一部分。如何你熟悉这些库能做的事的范围，许多问题可以快速解决，因此，熟悉Python标准库是很重要的，

在这个库中，我们将探讨一些经常使用的模块。在你安装的Python的文档中['Library Reference' section](http://docs.python.org/py3k/library/index.html)，你可以找到在Python标准库中所有模块的完整细节。

让我们探讨几个有用的模块：

注意

:   如果你发现本章的主题太先进，你可以跳过这一章。但是，当你更喜欢使用Python编程时，我强烈建议你回到本章。

## sys（系统）模块

`sys`模块包含系统特定的功能。我们已经看到, `sys.argv`列表包含的命令行参数。

假设我们想要检查正在使用的Python命令的版本，也就是说，我们希望确保我们使用至少是版本3。`sys`模块给了我们这样的功能。

~~~
$ python3
>>> import sys
>>> sys.version_info
sys.version_info(major=3, minor=3, micro=0, releaselevel='final', serial=0)
>>> sys.version_info.major >= 3
True
~~~

它是如何工作的：

`sys`模块有一个给我们版本信息的`version_info`元组，第一部分是 major主版本号，例如，我们可以检查确保程序在Pythpn 3.0版本下运行。

保存为`versioncheck.py`:

~~~python
import sys, warnings
if sys.version_info.major < 3:
    warnings.warn("程序需要在 Python 3.0 以上版本上运行",
        RuntimeWarning)
else:
    print('按正常情况处理')
~~~

Output:

~~~
$ python2.7 versioncheck.py
versioncheck.py:6: 程序需要在 Python 3.0 以上版本上运行
  RuntimeWarning)

$ python3 versioncheck.py
按正常情况处理
~~~

它是如何工作的：

我们使用标准库的另一个模块，称为`warnings`(警告)，用于向最终用户显示警告。如果Python版本号小于3，我们显示相应的警告。

## logging（日志）模块

如果你想把一些调试信息或重要信息存储在某个地方，以便你可以检查你的程序是否按你的期望运行，你该如何做呢？你怎样将这些信息"存储在某个地方"？这可以通过使用 `logging`模块实现。

保存为 `use_logging.py`:

~~~python
import os, platform, logging

if platform.platform().startswith('Windows'):
    logging_file = os.path.join(os.getenv('HOMEDRIVE'), os.getenv('HOMEPATH'), 'test.log')
else:
    logging_file = os.path.join(os.getenv('HOME'), 'test.log')

print("记录到", logging_file)

logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s : %(levelname)s : %(message)s',
    filename = logging_file,
    filemode = 'w',
)

logging.debug("程序开始")
logging.info("做些事情")
logging.warning("现在结束")
~~~

Output:

~~~
$ python3 use_logging.py
记录到 C:\Users\swaroop\test.log
~~~

如果我们检查`test.log`文件的内容，它看起来像：

~~~
2013-02-05 21:38:24,592 : DEBUG : 程序开始
2013-02-05 21:38:24,592 : INFO : 做些事情
2013-02-05 21:38:24,592 : WARNING : 现在结束
~~~

它是如何工作的：

我们从标准库使用三个模块，`os`（操作系统）模块，与操作系统交互，`platform`（平台）模块，操作平台的信息，信息平台即操作系统和`logging`（日志）模块，*记录*信息。

首先,我们根据`platform.platform()` (更多信息，见`import platform; help(platform)`)返回的字符串检查我们正在使用哪个操作系统，如果是Windows，我们找出我们要存储信息的主盘（磁盘驱动器），目录和文件名。把这三部分组装在一起，我们得到文件的完整位置。其他平台，我们需要知道用户的主文件夹，然后我们就得到了完整的文件的位置。

我们使用`os.path.join()`函数把这3部分连接在一起。之所以使用一个特殊的函数而不仅仅是字符串连接，是因为这个函数将确保整的位置的格式与操作系统所期望的相匹配。

我们配置`logging`模块使之以我们指定的特定格式来编写所有的信息。

最后，我们旋转为了调试、信息、警告甚至至关重要的信息。一旦程序已经运行，我们可以检查这个文件，我们将会知道在程序中发生了什么事，即使没有信息显示给运行程序的用户。

## Week（周）系列模块

在标准库中，有很多需要探索如 [debugging(调试)](http://docs.python.org/py3k/library/pdb.html),[handling command line options（处理命令行选项）](http://docs.python.org/py3k/library/argparse.html),[regular expressions(正则表达式)](http://docs.python.org/py3k/library/re.html)等等。

进一步探索标准库的最好方法就是阅读 Doug Hellmann的优秀的[Python Module of the Week](http://www.doughellmann.com/projects/PyMOTW/)系列或阅读［Python文档］(http://docs.python.org/py3k/)。

## 小结

我们已经探索过了Python标准库中许多模块的一些功能。强烈建议浏览［Python Standard Library documentation(Python标准库文档)］(http://docs.python.org/py3k/library/index.html)来了解可用的所有模块。

接下来，我们将讨论Python的各个方面,这将使我们的Python旅程更*完整*。
